{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+LAsCeA,EAnCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACDC,mBAAS,IADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAkBrC,OAEI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAQlB,2BACAO,KAAK,OACLC,MAAOT,EACPU,SArBsB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,+DAIDI,MAAMF,GAJL,cAIdG,EAJc,gBAKCA,EAAKC,OALN,uBAKbC,EALa,EAKbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAO,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAIlC,OACI,yBAAKc,UAAU,0CACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IAC1B,2BAAIA,KCLIO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAW,WAEXxB,EAASC,GAAWwB,MAAM,SAAAC,GAGlBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAACpB,IAIGqB,EDrBwBK,CAAc1B,GAAjCa,EAFuB,EAE5BN,KAAca,EAFc,EAEdA,QAUrB,OACQ,oCACR,wBAAIJ,UAAU,qCAAqChB,GAG9CoB,GAAW,uBAAGJ,UAAU,oCAAb,YAEN,yBAAKA,UAAU,aAGbH,EAAOJ,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,eACAiB,IAAKjB,EAAIC,IACLD,UEMLkB,EA/BK,WAAM,MAIc1C,mBAAS,CAAC,gBAJxB,mBAIf2C,EAJe,KAIH5C,EAJG,KAWtB,OACI,oCAEI,4CACH,kBAAC,EAAD,CAAaA,cAAeA,IACzB,6BAGA,4BAEI4C,EAAWpB,KAAK,SAAAT,GAAQ,OACxB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAUA,U,MCzB1B8B,IAASC,OAEL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.1cd3acd3.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n\n        if (inputValue.trim().length >2) {\n            setCategories(cats => [inputValue, ...cats ]);\n            setInputValue('')\n\n        }\n        \n    }\n    return (\n       \n        <form onSubmit={handleSubmit}>\n        <input \n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        />\n        </form>\n    )\n    \n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n\n","\n\nexport const getGifs = async(category) =>{\n    \n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=mEVQVt5w1A1l3V5at9JthYyneZKxwKQL`;\n   const resp = await fetch(url);\n   const {data} = await resp.json();\n\n   const gifs = data.map( img =>{\n       return{\n           id: img.id,\n           title: img.title,\n           url: img.images?.downsized_medium.url\n       }\n   })\n\n  return gifs;\n\n\n}","\nimport React from 'react'\n\n\nexport const GifGridItem = ({id,title,url}) => {\n\n\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n           <img src={url} alt={title}/>\n     <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images , loading}= useFetchGifs( category );\n\n\n    // useEffect( ()=> {\n    //     getGifs(category).then( setImages)\n    // }, [category] )\n\n    \n\n\n    return (\n            <>\n    <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n  \n        {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\n \n              <div className=\"card-grid\">\n            \n            {\n                images.map( img =>(\n                <GifGridItem \n                key={img.id}\n                {...img}\n                /> \n                ))\n            }\n               \n                \n            \n        </div> \n\n            </>\n            \n    )\n}\n","import { useState, useEffect } from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n    getGifs( category ).then( imgs =>{\n\n      \n            setState({\n                data: imgs,\n                loading: false\n            });\n       \n            \n    })\n\n    }, [category])\n\n\n\n    return state; // {data:[], loading:true}\n\n}","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n\nconst GifExpertApp= () => {\n\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['Dragon Ball']);\n   \n    // const handleAdd = () => {\n     //setCategories(cats => [...cats, inputValue ] )\n    // };\n\n    \n    return (\n        <>\n            \n            <h2>GifExpertApp</h2>\n         <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n\n            <ol>\n                { \n                categories.map( category => (\n                <GifGrid \n                key={category}\n                category={category}/>\n                ))}\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css'\n\nReactDOM.render(\n\n    <GifExpertApp/> ,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}